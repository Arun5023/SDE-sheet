Q1-> Strongly Connected Components (Tarjan’s/Kosaraju's Algorithm) (https://www.codingninjas.com/codestudio/problems/985311?topList=striver-sde-sheet-problems&utm_source=striver&utm_medium=website&leftPanelTab=0)
#include<bits/stdc++.h>
void dfs(int s, vector<int> &vis,vector<int> adj[], stack<int> &st){
   vis[s]=1;
   for(auto it : adj[s]){
       if(!vis[it])
           dfs(it,vis,adj,st);
   }
   st.push(s);
}
void revdfs(int s,vector<int> &vis,vector<int> tra[],vector<int> &res){
   vis[s]=1;
   res.push_back(s);
   for(auto it:tra[s]){
       if(!vis[it]){
           revdfs(it, vis, tra,res);
       }
   }
}
vector<vector<int>> stronglyConnectedComponents(int n, vector<vector<int>> &edges)
{
   vector<vector<int>> ans;
   vector<int> vis(n,0);
   vector<int> adj[n];
   vector<int> tra[n];
   stack<int> st;
   for(auto it:edges){
       adj[it[0]].push_back(it[1]);
   }
   for(int i=0;i<n;i++){
       if(!vis[i]){
           dfs(i,vis,adj,st);
       }
   }
   for(int i=0;i<n;i++){
       vis[i]=0;
       for(auto it: adj[i]){
           tra[it].push_back(i);
       }
   }
   while(!st.empty()){
       int a=st.top();
       st.pop();
       if(!vis[a]){
           vector<int> res;
           revdfs(a,vis,tra,res);
           ans.push_back(res);
       }
   }
   return ans;
}


Q2-> Implementing Dijkstra Algorithm (https://practice.geeksforgeeks.org/problems/implementing-dijkstra-set-1-adjacency-matrix/1)
vector <int> dijkstra(int v, vector<vector<int>> adj[], int s)
{
    // Code here
    vector<int> dis(v,INT_MAX);
    dis[s]=0;
    priority_queue<pair<int,int> , vector<pair<int,int>> , greater<pair<int,int>> > pq;
    pq.push({0,s});
    while(!pq.empty())
    {
        int dist=pq.top().first;
        int n=pq.top().second;
        pq.pop();
        for(auto it : adj[n])
        {
            int next=it[0];
            int nextdist=it[1];
            if(dis[n]+nextdist<dis[next]){
            dis[next]=dis[n]+nextdist;
            pq.push({dis[next],next});
            }
        }
    }
    return dis;
}


Q3-> Distance from the Source (Bellman-Ford Algorithm) (https://practice.geeksforgeeks.org/problems/distance-from-the-source-bellman-ford-algorithm/0?fbclid=IwAR2_lL0T84DnciLyzMTQuVTMBOi82nTWNLuXjUgahnrtBgkphKiYk6xcyJU)
vector <int> bellman_ford(int V, vector<vector<int>> adj, int S) {
       vector<int> dis(V,1e8);
       dis[S]=0;
       for(int i=1;i<=V-1;i++)
       {
           for(auto it:adj)
           {
               int u=it[0];
               int v=it[1];
               int wt=it[2];
               if(dis[u]+wt<dis[v])
               {
                   dis[v]=dis[u]+wt;
               }
           }
       }
       return dis;
}


Q4-> Floyd Warshall (https://practice.geeksforgeeks.org/problems/implementing-floyd-warshall2042/1)
class Solution {
  public:
	void shortest_distance(vector<vector<int>>&matrix){
	    int n = matrix.size();
	    
	    for(int k=0; k<n; k++){
	        for(int u=0; u<n; u++){
	            for(int v=0; v<n; v++){
	                if(matrix[u][k] != -1 and matrix[k][v] != -1){
	                    if(matrix[u][v] == -1){
	                        matrix[u][v] = matrix[u][k] + matrix[k][v];
	                    }
	                    else{
	                        matrix[u][v] = min(matrix[u][v], matrix[u][k]+matrix[k][v]);
	                    }
	                }
	            }
	        }
	    }
	}
};


Q5-> Minimum Spanning Tree:Prim's Algorithm (https://practice.geeksforgeeks.org/problems/minimum-spanning-tree/1)
int spanningTree(int V, vector<vector<int>> adj[])
{
        // code here
        int ans=0;
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> pq;
        vector<int> visit(V,0);
        pq.push({0,0});
        
        while(!pq.empty())
        {
            int to=pq.top().second;
            int w=pq.top().first;
            pq.pop();
            if(visit[to])
            continue;
            
            ans+=w;
            visit[to]=1;
            for(auto i:adj[to])
            {
                if(visit[i[0]]==0){
                     pq.push({i[1],i[0]});
                }
            }
        }
        return ans;
}


Q6->Minimum Spanning Tree:Kruskal’s Algo (https://practice.geeksforgeeks.org/problems/minimum-spanning-tree/1)
int findpar(int node,vector<int>& parent)
	{
	    if(node==parent[node])
	    return node;
	    
	    return parent[node]=findpar(parent[node],parent);
	}
	void Union(int u,int v,vector<int>& parent,vector<int>& rank)
	{
	    u=findpar(u,parent);
	    v=findpar(v,parent);
	    if(rank[u]<rank[v])
	    {
	        parent[u]=v;
	    }
	    else if(rank[u]>rank[v])
	    {
	        parent[v]=u;
	    }
	    else
	    {
	        parent[v]=u;
	        rank[u]++;
	    }
	}
	static bool cmp(vector<int> &first, vector<int> &second)
    {
       return first[2] < second[2];
    }
    int spanningTree(int V, vector<vector<int>> adj[])
    {
        vector<vector<int>> edges;
        for(int u = 0; u < V; u++)
        {
            for(auto &it : adj[u])
            {
                int v = it[0], wt = it[1];
                
                edges.push_back({u, v, wt});
            }
        }
        
        
        sort(edges.begin(), edges.end(), cmp);
        int ans=0;
        
        vector<int> parent(V);
        for(int i=0;i<V;i++)
        parent[i]=i;
        
        vector<int> rank(V,0);
        for(auto i:edges)
        {
            int u=i[0],v=i[1],w=i[2];
            if(findpar(u,parent)!=findpar(v,parent))
            {
                ans+=w;
                Union(u,v,parent,rank);
            }
        }
        return ans;
}