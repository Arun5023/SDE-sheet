Q1-> 124. Binary Tree Maximum Path Sum (https://leetcode.com/problems/binary-tree-maximum-path-sum/)
class Solution {
public:
   int max_sum=INT_MIN;
    int max_gain(TreeNode* root)
    {
        if(!root)return 0;
        int l=max(max_gain(root->left),0);
        int r=max(max_gain(root->right),0);
        int new_price=root->val+l+r;
        max_sum=max(max_sum,new_price);
        return root->val+max(l,r);
    }
    int maxPathSum(TreeNode* root) {
        max_gain(root);
        return max_sum;
    }
};


Q2-> 105. Construct Binary Tree from Preorder and Inorder Traversal (https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/)
class Solution {
public:
    int idx=0;
    int find(vector<int>& inorder,int i,int j,int k)
    {
        for(int x=i;x<=j;x++)
        {
            if(inorder[x]==k)
                return x;
        }
        return -1;
    }
    TreeNode* solve(int i,int j,vector<int>& preorder,vector<int>& inorder)
    {
        if(i>j)
            return NULL;
        TreeNode* root=new TreeNode(preorder[idx]);
        idx++;
        if(i==j)
            return root;
        
        int k=find(inorder,i,j,root->val);
        root->left=solve(i,k-1,preorder,inorder);
        root->right=solve(k+1,j,preorder,inorder);
        return root;
        
        
    }
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        
        return solve(0,inorder.size()-1,preorder,inorder);
    }
};


Q3-> 106. Construct Binary Tree from Inorder and Postorder Traversal (https://leetcode.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/)
class Solution {
public:
     int find(vector<int> inorder,int s,int e,int k)
    {
    
        for(int i=s;i<=e;i++)
        {
            if(inorder[i]==k)
                return i;
        }
        return -1;
    }
    
    // int idx;
    
    TreeNode* solve(vector<int>& postorder, vector<int>& inorder,int l,int h,int& idx){
        if(l>h)
            return NULL;
        
        int curr = postorder[idx];
        idx--;
        TreeNode* root = new TreeNode(curr);
        if(l==h)
            return root;
        int pos = find(inorder,l,h,curr);
        
        root->right = solve(postorder,inorder,pos+1,h,idx);
        root->left = solve(postorder,inorder,l,pos-1,idx);
        return root;
            
    }
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
         int idx=inorder.size()-1;
        return solve(postorder,inorder,0,postorder.size()-1,idx);
    }
};


Q4-> 101. Symmetric Tree (https://leetcode.com/problems/symmetric-tree/)
class Solution {
public:
    bool solve(TreeNode* a,TreeNode* b)
    {
        if(a==NULL && b==NULL)
            return true;
        
        if(a==NULL||b==NULL)
            return false;
        
        if(a->val!=b->val)
            return false;
        
        if(solve(a->left,b->right)==false||solve(a->right,b->left)==false)
            return false;
        
        return true;
    }
    bool isSymmetric(TreeNode* root) {
      if(root==NULL)
          return true;
        
        return solve(root->left,root->right);
    }
};


Q5-> 114. Flatten Binary Tree to Linked List (https://leetcode.com/problems/flatten-binary-tree-to-linked-list/)
class Solution {
public:
    TreeNode* prev=NULL;
    void flatten(TreeNode* root) {
       if(root==NULL)
           return ;
        
        flatten(root->right);
        flatten(root->left);
       
        root->left=NULL;
        root->right=prev;
        prev=root;
    }
};


Q6-> Mirror Tree (https://practice.geeksforgeeks.org/problems/mirror-tree/1)
class Solution {
  public:
    // Function to convert a binary tree into its mirror tree.
    void mirror(Node* node) {
        // code here
        if(node==NULL)
        return ;
        
        if(node->left==NULL && node->right==NULL)
        return ;
        
        Node* temp=node->left;
        node->left=node->right;
        node->right=temp;
        
        mirror(node->left);
        mirror(node->right);
    }
};


Q7-> Children Sum Property (https://www.codingninjas.com/codestudio/problems/childrensumproperty_790723?topList=striver-sde-sheet-problems&utm_source=striver&utm_medium=website&leftPanelTab=0)
void changeTree(BinaryTreeNode < int > * root) {
   if(root==NULL)
       return ;
    
    int child=0;
    if(root->left)
        child+=root->left->data;
    if(root->right)
        child+=root->right->data;
    
    if(child>=root->data)
        root->data=child;
    else
    {
        if(root->left)
        root->left->data=root->data;
        if(root->right)
            root->right->data=root->data;
    }
    changeTree(root->left);
    changeTree(root->right);
    
    int temp=0;
    if(root->left)
        temp+=root->left->data;
    if(root->right)
        temp+=root->right->data;
    
    if(root->left||root->right)
        root->data=temp;
}  