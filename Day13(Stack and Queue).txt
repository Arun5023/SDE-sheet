Q1-> Implement Stack using Array 
#include<bits/stdc++.h>

using namespace std;
class Stack {
  int size;
  int * arr;
  int top;
  public:
    Stack() {
      top = -1;
      size = 1000;
      arr = new int[size];
    }
  void push(int x) {
    top++;
    arr[top] = x;
  }
  int pop() {
    int x = arr[top];
    top--;
    return x;
  }
  int Top() {
    return arr[top];
  }
  int Size() {
    return top + 1;
  }
};
int main() {

  Stack s;
  s.push(6);
  s.push(3);
  s.push(7);
  cout << "Top of stack is before deleting any element " << s.Top() << endl;
  cout << "Size of stack before deleting any element " << s.Size() << endl;
  cout << "The element deleted is " << s.pop() << endl;
  cout << "Size of stack after deleting an element " << s.Size() << endl;
  cout << "Top of stack after deleting an element " << s.Top() << endl;
  return 0;
}


Q2-> Implement a Queue (https://www.codingninjas.com/codestudio/problems/2099908?topList=striver-sde-sheet-problems&utm_source=striver&utm_medium=website&leftPanelTab=0)
class Queue {
public:
    int f;
    int rear;
    int* arr;
    int size;
    Queue() {
        // Implement the Constructor
        size=50001;
        arr = new int[size];
        f=-1;
        rear=-1;
    }

    bool isEmpty() {
        // Implement the isEmpty() function
        if(f==rear)
            return true;
        
        return false;
    }

    void enqueue(int data) {
        // Implement the enqueue() function
        arr[++rear]=data;
    }

    int dequeue() {
        // Implement the dequeue() function
        if(isEmpty())
            return -1;
        
        return arr[++f];
        
    }

    int front() {
        // Implement the front() function
        if(isEmpty())
            return -1;
        
        return arr[f+1];
    }
};


Q3-> 225. Implement Stack using Queues (https://leetcode.com/problems/implement-stack-using-queues/)
class MyStack {
public:
     queue<int> q1;
    queue<int> q2;
    MyStack() {
       
    }
    
    void push(int x) {
        q1.push(x);
    }
    
    int pop() {
        while(q1.size()>1)
        {
            q2.push(q1.front());
            q1.pop();
        }
        int x = q1.front();
        q1.pop();
        while(!q2.empty())
        {
            q1.push(q2.front());
            q2.pop();
        }
        return x;
    }
    
    int top() {
         while(q1.size()>1)
        {
            q2.push(q1.front());
            q1.pop();
        }
        int x = q1.front();
        q1.pop();
        q2.push(x);
        while(!q2.empty())
        {
            q1.push(q2.front());
            q2.pop();
        }
        return x;
    }
    
    bool empty() {
        if(q1.size()==0)
            return true;
        else
            return false;
    }
};


Q4-> 232. Implement Queue using Stacks (https://leetcode.com/problems/implement-queue-using-stacks/)
class MyQueue {
public:
    stack<int> s1,s2;
    MyQueue() {
        
    }
    
    void push(int x) {
        s1.push(x);
    }
    
    int pop() {
        while(s1.size()>1)
        {
            s2.push(s1.top());
            s1.pop();
        }
        int x  = s1.top();
        s1.pop();
        while(!s2.empty())
        {
            s1.push(s2.top());
            s2.pop();
        }
        return x;
    }
    
    int peek() {
         while(s1.size()>1)
        {
            s2.push(s1.top());
            s1.pop();
        }
        int x  = s1.top();
        s1.pop();
        s2.push(x);
        while(!s2.empty())
        {
            s1.push(s2.top());
            s2.pop();
        }
        return x;
    }
    
    bool empty() {
       return s1.empty();
    }
};


Q5-> 20. Valid Parentheses (https://leetcode.com/problems/valid-parentheses/)
class Solution {

public:

    bool isValid(string s) {

         stack<char> st;

    for(int i=0;i<s.size();i++)

    {

        if(s[i]=='(' || s[i]=='{' ||s[i]=='[')

        st.push(s[i]);

        else {

           if((s[i]==')' && !st.empty() && st.top()=='(') || (s[i]=='}' && !st.empty() && st.top()=='{') || (s[i]==']' && !st.empty() && st.top()=='['))

           st.pop();

           else {

           return false;

           }

        

        }

    }

    if(st.empty())

    return true;

    else {

    return false;

    }

    }

};


Q6-> 496. Next Greater Element I (https://leetcode.com/problems/next-greater-element-i/)
class Solution {
public:
    vector<int> nextGreaterElement(vector<int>& nums1, vector<int>& nums2) {
        vector<int> arr;
        stack<int> st;
        map<int,int> mp;
        for(int i=nums2.size()-1;i>=0;i--)
        {
            if(st.empty())
            {
                mp[nums2[i]]=-1;
            }
            else if(nums2[i]<st.top())
            {
                mp[nums2[i]]=st.top();
            }
            else
            {
                while(!st.empty()&&nums2[i]>=st.top())
                {
                    st.pop();
                }
                if(st.empty())
                  mp[nums2[i]]=-1;
                else
                  mp[nums2[i]]=st.top();    
            }
            st.push(nums2[i]);
        }
        
        for(int i=0;i<nums1.size();i++)
        {
            arr.push_back(mp[nums1[i]]);
        }
        return arr;
    }
};


Q7-> Sort a Stack (https://www.codingninjas.com/codestudio/problems/sort-a-stack_985275?topList=striver-sde-sheet-problems&utm_source=striver&utm_medium=website&leftPanelTab=0)
void insert(int x,stack<int>& st)
{
    if(st.empty()||st.top()<=x)
     { 
        st.push(x);
        return ;
     }
     int n=st.top();
    st.pop();
    insert(x,st);
    st.push(n);
}
void sortStack(stack<int> &stack)
{
	if(stack.size()==0)
        return ;
    
    int x=stack.top();
    stack.pop();
    sortStack(stack);
    insert(x,stack);
}
