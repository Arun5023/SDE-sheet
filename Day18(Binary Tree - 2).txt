Q1-> 102. Binary Tree Level Order Traversal (https://leetcode.com/problems/binary-tree-level-order-traversal/)
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        vector<vector<int>> ans;
        if(root==NULL)
            return ans;
        
        queue<TreeNode*> q;
        q.push(root);
        q.push(NULL);
        vector<int> temp;
        while(!q.empty())
        {
            TreeNode* curr=q.front();
            q.pop();
            if(curr!=NULL)
            {
                temp.push_back(curr->val);
                if(curr->left)
                    q.push(curr->left);
                if(curr->right)
                    q.push(curr->right);
            }
            else
            {
                ans.push_back(temp);
                temp.clear();
                if(!q.empty())
                q.push(NULL);
            }  
        }
        return ans;
    }
};


Q2-> 104. Maximum Depth of Binary Tree (https://leetcode.com/problems/maximum-depth-of-binary-tree/)
class Solution {
public:
    int maxDepth(TreeNode* root) {
        if(root==NULL)
            return 0;
        else
        {
            int l = maxDepth(root->left);
            int r = maxDepth(root->right);
            return max(l,r)+1;
        }
    }
};


Q3-> 543. Diameter of Binary Tree (https://leetcode.com/problems/diameter-of-binary-tree/)
class Solution {
public:
    int solve(TreeNode* root,int& ans)
    {
        if(root==NULL)
            return 0;
        else
        {
            int l=solve(root->left,ans);
            int r = solve(root->right,ans);
            ans=max(ans,l+r);
            return max(l,r)+1;
        }
    }
    int diameterOfBinaryTree(TreeNode* root) {
        if(root==NULL)
            return 0;
        int ans=0;
        solve(root,ans);
        return ans;
    }
};


Q4-> 110. Balanced Binary Tree (https://leetcode.com/problems/balanced-binary-tree/)
class Solution {
public:
    
    int solve(TreeNode* root,bool& ans)
    {
        if(ans==false)
        return 0;
        
        if(root==NULL)
            return 0;
        
        int l=solve(root->left,ans);
        int r=solve(root->right,ans);
        if(abs(l-r)>1)
        {
            ans=false;
        }
        return max(l,r)+1;
    }
    bool isBalanced(TreeNode* root) {
        
        bool ans=true;
        solve(root,ans);
        return ans;
        
    }
};


Q5-> 236. Lowest Common Ancestor of a Binary Tree (https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/)
class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        
        if(root==NULL||p==root||q==root)
            return root;
        
        TreeNode* l=lowestCommonAncestor(root->left,p,q);
        TreeNode* r=lowestCommonAncestor(root->right,p,q);
        
        if(l==NULL)
            return r;
        if(r==NULL)
            return l;
        
        return root;
    }
};


Q6-> 100. Same Tree (https://leetcode.com/problems/same-tree/)
class Solution {
public:
    bool isSameTree(TreeNode* p, TreeNode* q) {
        if(p==NULL && q==NULL)
            return true;
        
        if(p==NULL|| q==NULL)
            return false;
        
        if(p->val!=q->val)
            return false;
        
        if(isSameTree(p->left,q->left)==false||isSameTree(p->right,q->right)==false)
            return false;
        
        return true;
    }
};


Q7-> 103. Binary Tree Zigzag Level Order Traversal (https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/)
class Solution {
public:
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
        
        vector<vector<int>> ans;
        if(root==NULL)
            return ans;
        queue<TreeNode*> q;
        q.push(root);
        q.push(NULL);
        int level=1;
        vector<int> t;
        while(!q.empty())
        {
            TreeNode* curr = q.front();
            q.pop();
            if(curr!=NULL)
            {
                t.push_back(curr->val);
                if(curr->left)
                    q.push(curr->left);
                if(curr->right)
                    q.push(curr->right);
            }
            else
            {
                if(level%2==0)
                    reverse(t.begin(),t.end());
                
                ans.push_back(t);
                t.clear();
                level++;
                if(!q.empty())
                    q.push(NULL);
            }
        }
        return ans;
    }
};


Q8-> Boundary Traversal of Binary Tree(https://www.codingninjas.com/codestudio/problems/boundary-traversal_790725?topList=striver-sde-sheet-problems&utm_source=striver&utm_medium=website&leftPanelTab=0)
#include <bits/stdc++.h>
void leftVeiw(TreeNode<int> * root , vector<int>&ans){
   if(root == NULL){
       return ;  
   }
   if(root -> left == NULL and root -> right == NULL ){
       return ;  
   }
   ans.push_back(root -> data) ;  
   leftVeiw(root -> left , ans) ;  
   if(root -> left == NULL ){
       leftVeiw(root -> right , ans ) ;  
       return ;  
   }
   return ;  
}
void leafNodes(TreeNode<int> * root , vector<int> & ans){
   if(root == NULL){
       return ;  
   }
   if(root -> left == NULL and root -> right == NULL){
       ans.push_back(root->data) ;  
       return ;  
   }
   leafNodes(root -> left , ans) ;  
   leafNodes(root -> right , ans) ;  
   return ;  
}
void rightVeiw(TreeNode<int> * root , vector<int> & ans){
   if(root == NULL){
       return ;  
   }
   if(root->right == NULL and root -> left == NULL){
       return ;  
   }
   rightVeiw(root -> right, ans) ;  
   if(root -> right == NULL){
       rightVeiw(root -> left , ans) ;  
   }
   ans.push_back(root -> data) ;  
   return ;  
}
vector<int> traverseBoundary(TreeNode<int>* root){
   vector<int> ans;  
   if(!root){
       return ans ;  
   }
   ans.push_back(root -> data) ;  
   if(root -> left){
       leftVeiw(root->left , ans) ;  
   }
   leafNodes(root->left, ans) ;  
   leafNodes(root -> right , ans) ;  
   if(root -> right){
       rightVeiw(root -> right , ans ) ;  
   }
   return ans ;  
}