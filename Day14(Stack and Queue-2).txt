Q1-> Next Smaller Element (https://www.codingninjas.com/codestudio/problems/1112581?topList=striver-sde-sheet-problems&utm_source=striver&utm_medium=website&leftPanelTab=0)
#include <bits/stdc++.h>
vector<int> nextSmallerElement(vector<int> &arr, int n)
{
    stack<int> st;
    vector<int> ans(n);
    for(int i=n-1;i>=0;i--)
    {
        if(st.empty())
        {
            ans[i]=-1;
        }
        else if(arr[i]>st.top())
        {
            ans[i]=st.top();
        }
        else
        {
            while(!st.empty() && arr[i]<=st.top())
                st.pop();
            
            if(st.empty())
                ans[i]=-1;
            else
                ans[i]=st.top();
        }
        st.push(arr[i]);
    }
    return ans;
}


Q2-> 146. LRU Cache (https://leetcode.com/problems/lru-cache/)
class LRUCache {
public:
    unordered_map<int, pair<list<int>::iterator, int>> ht;
    list<int> dll;
    int cap;
    LRUCache(int capacity) {
        cap=capacity;
    }
    
    void moveToFirst(int key){
        dll.erase(ht[key].first);
        dll.push_front(key);
        ht[key].first=dll.begin();
    }
    
    int get(int key) {
        if(ht.find(key)==ht.end()) return -1;
        
        moveToFirst(key);
        return ht[key].second;
    }
    
    void put(int key, int value) {
        if(ht.find(key)!=ht.end()){
            ht[key].second=value;
            moveToFirst(key);
        }
        else{
            dll.push_front(key);
            ht[key]={dll.begin(), value};
            cap--;
        }
        
        if(cap<0){
            ht.erase(dll.back());
            dll.pop_back();
            cap++;
        }
        
    }
};


Q4-> 84. Largest Rectangle in Histogram (https://leetcode.com/problems/largest-rectangle-in-histogram/)
class Solution {
public:
    int largestRectangleArea(vector<int>& heights) {
       stack<int> st;
        int n =heights.size();
        int area=0;
        int i=0;
        while(i<n)
        {
            if(st.empty() || heights[st.top()]<=heights[i])
            {
              st.push(i);
                i++;
            }
            else
            {
                int h = heights[st.top()];
                st.pop();
                
                area = max(area,h*(st.empty()?i:i-st.top()-1));
            }
        }
        while(!st.empty())
        {
           int h = heights[st.top()];
                st.pop();
                
                area = max(area,h*(st.empty()?i:i-st.top()-1));
        }
        return area;
    }
};


Q5-> 239. Sliding Window Maximum (https://leetcode.com/problems/sliding-window-maximum/)
class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        vector<int> ans;
        deque<int> dq;
        int i=0,j=0;
        while(j<nums.size())
        {
            while(!dq.empty() && nums[j]>dq.back())
                dq.pop_back();
            
            dq.push_back(nums[j]);
            if(j-i+1<k)
                j++;
            else if(j-i+1==k)
            {
                ans.push_back(dq.front());
                if(nums[i]==dq.front())
                    dq.pop_front();
                
                i++;
                j++;
            }
        }
        return ans;
    }
};


Q6-> 155. Min Stack (https://leetcode.com/problems/min-stack/)
class MinStack {
public:
    stack<int> s1;
    stack<int> s2;
    MinStack() {
        
    }
    
    void push(int val) {
        s1.push(val);
        if(s2.empty()||val<=s2.top())
            s2.push(val);
    }
    
    void pop() {
        int x=s1.top();
        s1.pop();
        if(x==s2.top())
            s2.pop();
    }
    
    int top() {
        return s1.top();
    }
    
    int getMin() {
       return s2.top(); 
    }
}; 


Q7-> 994. Rotting Oranges (https://leetcode.com/problems/rotting-oranges/)
class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) 
    {
        
        vector<int> dir={-1,0,1,0,-1}; 
        
        int m=grid.size();
        int n=grid[0].size();
        
        queue<pair<int,int>> q;
        int fresh=0; 
        for(int i=0;i<m;i++)
            for(int j=0;j<n;j++)
            {
                if(grid[i][j]==2)
                    q.push({i,j});
                if(grid[i][j]==1)
                    fresh++;
            }
        int ans=-1; 
        while(!q.empty())
        {
            int sz=q.size();
            while(sz--)
            {
                pair<int,int> p=q.front();
                q.pop();
                for(int i=0;i<4;i++)
                {
                    int r=p.first+dir[i];
                    int c=p.second+dir[i+1];
                    if(r>=0 && r<m && c>=0 && c<n &&grid[r][c]==1)
                    {
                        grid[r][c]=2;
                        q.push({r,c});
                        fresh--; 
                    }
                    
                }
            }
            ans++; 
        }
        if(fresh>0) return -1; 
        if(ans==-1) return 0; 
        return ans;
        
    }
};


Q8-> 901. Online Stock Span (https://leetcode.com/problems/online-stock-span/)
class StockSpanner {
public:
    stack<pair<int,int>> st;
    StockSpanner() {
        
    }
    
    int next(int price) {
        if(st.empty())
        {
            st.push({price,1});
            return 1;
        }
        else
        {
            int c=1;
            while(!st.empty() && st.top().first<=price)
            {
                c+=st.top().second;
                st.pop();
            }
            st.push({price,c});
            return c;
        }
        
        
    }
};


Q9-> Maximum of minimum for every window size (https://www.codingninjas.com/codestudio/problems/max-of-min_982935?topList=striver-sde-sheet-problems&utm_source=striver&utm_medium=website)
#include <bits/stdc++.h>
vector<int> maxMinWindow(vector<int> arr, int n) {
    // Write your code here.
     stack<int> s;
        vector<int> left(n,-1), right(n,n);
        
        for(int i=0;i<n;i++){
            while (s.size() && arr[s.top()] >= arr[i]) s.pop();
     
            if(s.size()) left[i] = s.top();
     
            s.push(i);
        }
        
        while (!s.empty()) s.pop();
        
        for (int i=n-1;i>=0;i--){
            while(!s.empty() && arr[s.top()] >= arr[i]) s.pop();
     
            if(s.size()) right[i] = s.top();
     
            s.push(i);
        }
        
        vector<int> ans(n,INT_MIN);
        
        for (int i=0; i<n; i++){
            int len = right[i] - left[i] - 2;
            
            ans[len] = max(ans[len], arr[i]);
        }
        
        for (int i=n-2; i>=0; i--)
            ans[i] = max(ans[i], ans[i+1]);
            
        
        return ans;       
}


Q10-> The Celebrity Problem (https://www.codingninjas.com/codestudio/problems/the-celebrity-problem_982769?topList=striver-sde-sheet-problems&utm_source=striver&utm_medium=website&leftPanelTab=0)
#include<stack>
int findCelebrity(int n) {
     stack<int> s;
    for(int i=0;i<n;i++)
        s.push(i);
    while(s.size()>1){
        int a=s.top();
        s.pop();
        int b=s.top();
        s.pop();
        if(knows(a,b))
            s.push(b);
        else
            s.push(a);
    }
    int ans=s.top();    
    for(int i=0;i<n;i++){
        if(knows(ans,i))
            return -1;
    }
    int count=0;
    for(int i=0;i<n;i++){
        if(knows(i,ans))
            count++;
    }
    if(count==n-1)
        return ans;
    return -1;
}