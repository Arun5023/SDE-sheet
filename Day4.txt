Q1-> 1. Two Sum (https://leetcode.com/problems/two-sum/)
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        vector<int> ans(2);
        unordered_map<int,int> mp;
        for(int i=0;i<nums.size();i++)
        {
            if(mp.find(target-nums[i])!=mp.end())
            {
                ans[0]=mp[target-nums[i]];
                ans[1]=i;
                break;
            }
            else
                mp[nums[i]]=i;
        }
        return ans;
    }
};


Q2-> 18. 4Sum (https://leetcode.com/problems/4sum/)
class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& num, int target) {
        vector<vector<int> > res;
    
        if (num.empty())
            return res;
    
        target=(long long)target;
        sort(num.begin(),num.end());
    
        for (int i = 0; i < num.size(); i++) {
        
            long long target_3 = target - num[i];
        
            for (int j = i + 1; j < num.size(); j++) {
            
               long long target_2 = target_3 - num[j];
            
                int front = j + 1;
                int back = num.size() - 1;
            
                while(front < back) {
                
                    long long two_sum = num[front] + num[back];
                
                    if (two_sum < target_2) front++;
                
                    else if (two_sum > target_2) back--;
                
                    else {
                    
                        vector<int> quadruplet(4, 0);
                        quadruplet[0] = num[i];
                        quadruplet[1] = num[j];
                        quadruplet[2] = num[front];
                        quadruplet[3] = num[back];
                        res.push_back(quadruplet);
                    
                        // Processing the duplicates of number 3
                        while (front < back && num[front] == quadruplet[2]) ++front;
                    
                        // Processing the duplicates of number 4
                        while (front < back && num[back] == quadruplet[3]) --back;
                
                    }
                }
                
                // Processing the duplicates of number 2
                while(j + 1 < num.size() && num[j + 1] == num[j]) ++j;
            }
        
            // Processing the duplicates of number 1
            while (i + 1 < num.size() && num[i + 1] == num[i]) ++i;
        
        }
    
        return res;
    }
};


Q3-> 128. Longest Consecutive Sequence (https://leetcode.com/problems/longest-consecutive-sequence/)
class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
        
        if(nums.size()==0)
            return 0;
        
        map<int,int> mp;
        for(int i=0;i<nums.size();i++)
        {
            mp[nums[i]]++;
        }
       auto it = mp.begin();
        int prev = it->first;
        int count=0,ans=0;
        for(auto i : mp)
        {
            if(prev == i.first -1)
            {
                count++;
            }
            else
            {
                ans = max(ans,count);
                count=0;
            }
             prev = i.first;
        }
        ans=max(ans,count);
        return ans+1;
    }
};


Q4-> Longest Subarray Zero Sum (https://www.codingninjas.com/codestudio/problems/920321?topList=striver-sde-sheet-problems&utm_source=striver&utm_medium=website&leftPanelTab=0)
#include <bits/stdc++.h> 
int LongestSubsetWithZeroSum(vector < int > arr) {

  // Write your code here
    int ans=0;
    unordered_map<long long,int> mp;
    mp[0]=-1;
    long long sum=0;
    for(int i=0;i<arr.size();i++)
    {
        sum+=arr[i];
        if(mp.find(sum)!=mp.end())
        {
            ans=max(ans,i-mp[sum]);
        }
        else
            mp[sum]=i;
    }
    return ans;

}


Q5-> Count Subarrays with Given XOR (https://www.codingninjas.com/codestudio/problems/1115652?topList=striver-sde-sheet-problems&utm_source=striver&utm_medium=website&leftPanelTab=0)
#include <bits/stdc++.h> 
int subarraysXor(vector<int> &arr, int x)
{
    //    Write your code here.
    unordered_map<int,int> mp;
    int c=0;
    int xr=0;
    mp[0]++;
    for(int i=0;i<arr.size();i++)
    {
        xr=xr^arr[i];
        if(mp.find(xr^x)!=mp.end())
        {
            c+=mp[xr^x];
        }
            mp[xr]++;
    }
    return c;
}


Q6-> 3. Longest Substring Without Repeating Characters (https://leetcode.com/problems/longest-substring-without-repeating-characters/)
class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        int ans=0;
        int c=0;
        unordered_map<int,int> mp;
        int j=0,i=0;
        while(j<s.length())
        {
            if(mp.find(s[j])==mp.end())
            {
                mp[s[j]]++;
                c++;
                j++;
            }
            else
            {
                ans=max(ans,c);
                while(mp.find(s[j])!=mp.end())
                {
                    mp.erase(s[i]);
                    c--;
                    i++;
                }
                mp[s[j]]++;
                j++;
                c++;
            }
        }
        ans=max(ans,c);
        return ans;
    }
};