Q1->Nth Root Of M (https://www.codingninjas.com/codestudio/problems/1062679?topList=striver-sde-sheet-problems&utm_source=striver&utm_medium=website&leftPanelTab=0)
 double multiply(double mid,int n)
{
    double ans=1.0;
    for(int i=1;i<=n;i++)
        ans=ans*mid;
    
    return ans;
}
double findNthRootOfM(int n, long long m) {
    double l=1,h=m;
    double e=1e-6;
    while((h-l)>e)
    {
        double mid=(l+h)/2.0;
        if(multiply(mid,n)<m)
        {
            l=mid;
        }
        else
            h=mid;
    }
    return l;
}


Q2-> Matrix Median (https://www.codingninjas.com/codestudio/problems/873378?topList=striver-sde-sheet-problems&utm_source=striver&utm_medium=website&leftPanelTab=0)
int count(vector<int>& arr,int k)
{
    int l=0;
    int h=arr.size()-1;
    while(l<=h)
    {
        int mid=(l+h)/2;
        if(arr[mid]<=k)
            l=mid+1;
        else
            h=mid-1;
    }
    return l;
}
int getMedian(vector<vector<int>> &matrix)
{
    int l=1;
    int h=1e9;
    int n =matrix.size();
    int m=matrix[0].size();
    while(l<=h)
    {
        int mid=l+(h-l)/2;
        int c=0;
        for(int i=0;i<n;i++)
        {
            c+=count(matrix[i],mid);
        }
        if(c<=(n*m)/2)
            l=mid+1;
        else
            h=mid-1;
    }
    return l;
}


Q3-> 540. Single Element in a Sorted Array (https://leetcode.com/problems/single-element-in-a-sorted-array/)
class Solution {
public:
   int singleNonDuplicate(vector<int>& nums) {
	int left = 0, right = nums.size() - 1;
	while(left < right){
		int mid = (left + right)/2;
		if((mid % 2 == 0 && nums[mid] == nums[mid + 1]) || (mid % 2 == 1 && nums[mid] == nums[mid - 1]))
			left = mid + 1;
		else
			right = mid;
	}
	return nums[left];
  }
};


Q4-> 33. Search in Rotated Sorted Array (https://leetcode.com/problems/search-in-rotated-sorted-array/)
class Solution {
public:
    int search(vector<int>& nums, int target) {
        int l=0,h=nums.size()-1;
        while(l<=h)
        {
            int m=(l+h)/2;
            if(nums[m]==target)
                return m;
            else if(nums[l]<=nums[m])
            {
                if(nums[l]<=target && nums[m]>=target)
                    h=m-1;
                else
                    l=m+1;
            }
            else
            {
                if(nums[h]>=target && nums[m]<=target)
                    l=m+1;
                else
                    h=m-1;
            }
        }
        return -1;
    }
};


Q5-> 4. Median of Two Sorted Arrays (https://leetcode.com/problems/median-of-two-sorted-arrays/)
class Solution {
public:
    double mediann(vector<int>&a,vector<int>&b){
        int m=a.size();
        int n=b.size();
        if(m>n)
            return mediann(b,a);
        int l=0,r=m;
        while(l<=r){
            int partx=l+(r-l)/2;
            int party=(m+n+1)/2-partx;
            int maxlx=(partx==0)?INT_MIN:a[partx-1];
            int minrx=(partx==m)?INT_MAX:a[partx];
            int maxly=(party==0)?INT_MIN:b[party-1];
            int minry=(party==n)?INT_MAX:b[party];
            if(maxlx<=minry&&maxly<=minrx){
                if((m+n)%2==0)
                    return (double)(max(maxlx,maxly)+min(minrx,minry))/2;
                else
                    return (double)(max(maxlx,maxly));
            }else if(maxlx>minry)
                r=partx-1;
            else
                l=partx+1;
        }
        return -1.0;
    }
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        double ans;
        ans=mediann(nums1,nums2);
        return ans;   
    }
};


Q6-> K-th element of two sorted Arrays (https://practice.geeksforgeeks.org/problems/k-th-element-of-two-sorted-array1317/1)
 int kthElement(int arr1[], int arr2[], int m, int n, int k) {
    if(m > n) {
        return kthElement(arr2, arr1, n, m, k); 
    }
        
    int low = max(0,k-n), high = min(k,m);
        
    while(low <= high) {
        int cut1 = (low + high) >> 1; 
        int cut2 = k - cut1; 
        int l1 = cut1 == 0 ? INT_MIN : arr1[cut1 - 1]; 
        int l2 = cut2 == 0 ? INT_MIN : arr2[cut2 - 1];
        int r1 = cut1 == m ? INT_MAX : arr1[cut1]; 
        int r2 = cut2 == n ? INT_MAX : arr2[cut2]; 
            
        if(l1 <= r2 && l2 <= r1) {
            return max(l1, l2);
        }
        else if (l1 > r2) {
            high = cut1 - 1;
        }
        else {
            low = cut1 + 1; 
        }
    }
    return 1; 
}


Q7-> Allocate Minimum Number of Pages
int isPossible(vector < int > & A, int pages, int students) {
  int cnt = 0;
  int sumAllocated = 0;
  for (int i = 0; i < A.size(); i++) {
    if (sumAllocated + A[i] > pages) {
      cnt++;
      sumAllocated = A[i];
      if (sumAllocated > pages) return false;
    } else {
      sumAllocated += A[i];
    }
  }
  if (cnt < students) return true;
  return false;
}
int books(vector < int > & A, int B) {
  if (B > A.size()) return -1;
  int low = A[0];
  int high = 0;
  //to find minimum value and sum of all pages
  for (int i = 0; i < A.size(); i++) {
    high = high + A[i];
    low = min(low, A[i]);
  }
  //binary search
  while (low <= high) {
    int mid = (low + high) >> 1;
    if (isPossible(A, mid, B)) {
      high = mid - 1;
    } else {
      low = mid + 1;
    }
  }
  return low;
}


Q8-> Chess Tournament (https://www.codingninjas.com/codestudio/problems/chess-tournament_981299?topList=striver-sde-sheet-problems&utm_source=striver&utm_medium=website&leftPanelTab=0)
bool is_possible(vector<int>& arr,int gap,int p)
{
    int sum=0;
    int count=1;
    int prev=arr[0];
    for(int i=1;i<arr.size();i++)
    {
        if(arr[i]-prev>=gap)
        {
            prev=arr[i];
            count++;
        }   
    }
      sum+=count;
    if(sum>=p)
            return true;
    
    return false;
}
int chessTournament(vector<int> arr , int n ,  int c){
	// Write your code here
    sort(arr.begin(),arr.end());
    int l=arr[1]-arr[0];
    int h=arr[n-1]-arr[0];
    int ans;
    for(int i=1;i<arr.size();i++)
    {
        l=min(l,arr[i]-arr[i-1]);
    }
    while(l<=h)
    {
        int mid=(l+h)/2;
        if(is_possible(arr,mid,c))
        {
            ans=mid;
            l=mid+1;
        }
        else
            h=mid-1;
    }
    return ans;
}