Q1-> Min Heap (https://www.codingninjas.com/codestudio/problems/min-heap_4691801?topList=striver-sde-sheet-problems&utm_source=striver&utm_medium=website)
vector<int> minHeap(int n, vector<vector<int>>& q) {
    // Write your code here.
    vector<int> ans;
    priority_queue<int,vector<int>,greater<int>> pq;
    for(int i=0;i<n;i++)
    {
        if(q[i][0]==0)
            pq.push(q[i][1]);
        else
        {
            ans.push_back(pq.top());
            pq.pop();
        }
    }
    return ans;
}


Q2-> 215. Kth Largest Element in an Array (https://leetcode.com/problems/kth-largest-element-in-an-array/)
class Solution {
public:
    int findKthLargest(vector<int>& nums, int k) {
        priority_queue<int,vector<int>,greater<int>> pq;
        for(int i=0;i<nums.size();i++)
        {
            pq.push(nums[i]);
            if(pq.size()>k)
                pq.pop();
        }
        return pq.top();
    }
};


Q3-> K Max Sum Combinations (https://www.codingninjas.com/codestudio/problems/k-max-sum-combinations_975322?topList=striver-sde-sheet-problems&utm_source=striver&utm_medium=website&leftPanelTab=0)
#include <bits/stdc++.h>
vector<int> kMaxSumCombination(vector<int> &a, vector<int> &b, int n, int k){
	priority_queue<int,vector<int>> pq;
    vector<int> ans;
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<n;j++)
        {
            pq.push(a[i]+b[j]);
        }
    }
    while(k--)
    {
        ans.push_back(pq.top());
        pq.pop();
    }
    return ans;
}


Q4-> 295. Find Median from Data Stream (https://leetcode.com/problems/find-median-from-data-stream/)
class MedianFinder {
public:
    priority_queue<int> maxHeap;
    priority_queue<int, vector<int>, greater<int>> minHeap;
    
    MedianFinder() {
    }
    void addNum(int num) {
        maxHeap.push(num);
        minHeap.push(maxHeap.top());
        maxHeap.pop();
        if (minHeap.size() > maxHeap.size()) {
            maxHeap.push(minHeap.top());
            minHeap.pop();
        }
    }
    double findMedian() {
        if (maxHeap.size() > minHeap.size()) return maxHeap.top();
        return (maxHeap.top() + minHeap.top()) / 2.0;
    }
};


Q5-> Merge K Sorted Arrays (https://www.codingninjas.com/codestudio/problems/merge-k-sorted-arrays_975379?leftPanelTab=0)
#include <bits/stdc++.h>
vector<int> mergeKSortedArrays(vector<vector<int>>&kArrays, int k)
{
    vector<int> ans;
    priority_queue<int,vector<int>,greater<int>> pq;
    for(int i=0;i<k;i++)
    {
        for(int j=0;j<kArrays[i].size();j++)
        {
            pq.push(kArrays[i][j]);
        }
    }
    while(!pq.empty())
    {
        ans.push_back(pq.top());
        pq.pop();
    }
    return ans;
}


Q6-> 347. Top K Frequent Elements (https://leetcode.com/problems/top-k-frequent-elements/)
class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
        map<int,int> mp;
        for(int i=0;i<nums.size();i++)
            mp[nums[i]]++;
        
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>> > pq;
        for(auto i:mp)
        {
            pq.push({i.second,i.first});
            if(pq.size()>k)
                pq.pop();
        }
        vector<int> ans;
       while(!pq.empty())
        {
            ans.push_back(pq.top().second);
           pq.pop();
        }
        return ans;
       
    }
};