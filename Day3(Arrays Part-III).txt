Q1-> 74. Search a 2D Matrix (https://leetcode.com/problems/search-a-2d-matrix/)
class Solution {
public:
    bool find(vector<vector<int>>& matrix,int target,int row)
    {
        int i=0,j=matrix[row].size()-1;
        while(i<=j)
        {
            int mid=(i+j)/2;
            if(matrix[row][mid]==target)
                return true;
            else if(matrix[row][mid]>target)
                j=mid-1;
            else 
                i=mid+1;
        }
        return false;
    }
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int i=0,j=matrix.size()-1;
        int col=matrix[0].size()-1;
        while(i<=j)
        {
            int mid=(i+j)/2;
            if(matrix[mid][0]<=target && matrix[mid][col]>=target)
            {
                if(find(matrix,target,mid))
                    return true;
                else
                    return false;
            }
            else if(matrix[mid][0]>target)
            {
                j=mid-1;
            }
            else
            {
                i=mid+1;
            }
        }
        return false;
    }
};


Q2-> 50. Pow(x, n) (https://leetcode.com/problems/powx-n/)
class Solution {
public:
    double myPow(double x, int n) {
        double result=1;
        
        int b = abs(n);
        while(b>0)
        {
            
            if(b&1)
                result*=x;
            
            x*=x;
            b=b>>1;
        }
        
        if(n>=0)
            return result;
        else
            return 1/result;
    }
};


Q3-> 169. Majority Element (https://leetcode.com/problems/majority-element/)
class Solution {
public:
    int majorityElement(vector<int>& nums) {
       int ans=nums[0],count=1;
        for(int i=1;i<nums.size();i++)
        {
            if(count==0)
            {
                count++;
                ans=nums[i];
            }
            else if(nums[i]==ans)
                count++;
            else
                count--;
        }
        return ans;
    }
};


Q4-> 229. Majority Element II (https://leetcode.com/problems/majority-element-ii/)
class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
        vector<int> ans;
        int n=nums.size();
        int num1=-1,num2=-1,c1=0,c2=0;
        for(auto i:nums)
        {
            if(num1==i)
                c1++;
            else if(num2==i)
                c2++;
            else if(c1==0)
            {
                c1++;
                num1=i;
            }
            else if(c2==0)
            {
                c2++;
                num2=i;
            }
            else
            {
                c1--;
                c2--;
            }
        }
        int t1=0,t2=0;
        for(auto i:nums)
        {
            if(i==num1)
                t1++;
            else if(i==num2)
                t2++;
        }
        if(t1>n/3)
            ans.push_back(num1);
        if(t2>n/3)
            ans.push_back(num2);
        
        return ans;
    }
};


Q5-> 62. Unique Paths (https://leetcode.com/problems/unique-paths/)
class Solution {
public:
    int t[101][101]={0};
     
    int uniquePaths(int m, int n) {
        if(m<=0 || n<=0)
            return 0;
        if(m==1 && n==1)
            return 1;
        
        if(t[m][n]!=0)
            return t[m][n];
        
        return t[m][n] = uniquePaths(m-1,n)+uniquePaths(m,n-1);
    }
};


Q6-> 493. Reverse Pairs (https://leetcode.com/problems/reverse-pairs/)
class Solution {
public:
    int c=0;
void merge(int l,int h,int mid,vector<int>& arr)
{
    int i=l,j=mid+1;
    while(i<=mid && j<=h)
    {
        if((long)arr[i]>2*long(arr[j]))
        {
            c+=mid-i+1;
            j++;
        }
        else
            i++;
        
    }
    
    sort(arr.begin()+l,arr.begin()+h+1);
   
    
}
void merge_sort(vector<int>& arr,int l,int h)
{
    if(l<h)
    {
        int mid=(l+h)/2;
        merge_sort(arr,l,mid);
        merge_sort(arr,mid+1,h);
        merge(l,h,mid,arr);
    }
}
    int reversePairs(vector<int>& nums) {
        merge_sort(nums,0,nums.size()-1);
        return c;
    }
};
