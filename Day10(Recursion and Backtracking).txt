Q1-> 46. Permutations (https://leetcode.com/problems/permutations/)
class Solution {
public:
     vector<vector<int>> ans;
    void perm(vector<int>& nums,int l,int h)
    {
        if(l==h)
        {
           ans.push_back(nums);
            return;
        }
        else
        {
            for(int i=l;i<=h;i++)
            {
                swap(nums[i],nums[l]);
                perm(nums,l+1,h);
                swap(nums[i],nums[l]);
            }
        }
    }
    vector<vector<int>> permute(vector<int>& nums) {
        perm(nums,0,nums.size()-1);
        return ans;
    }
};


Q2-> 51. N-Queens (https://leetcode.com/problems/n-queens/)
class Solution {
public:
    vector<vector<string>> ans;
    bool is_safe(int r,int c,vector<string>& t,int n)
    {
        for(int i=0;i<=r;i++)
        {
            if(t[i][c]=='Q')
                return false;
        }
        
        for(int j=0;j<=c;j++)
        {
            if(t[r][j]=='Q')
                return false;
        }
        int i=r,j=c;
        while(i>=0 && j>=0)
        {
            if(t[i][j]=='Q')
                return false;
            
            i--;
            j--;
        }
        i=r,j=c;
        while(i>=0 && j<n)
        {
            if(t[i][j]=='Q')
                return false;
            
            i--;
            j++;
        }
        return true;
    }
    void solve(int i,int j,vector<string>& t,int n)
    {
        if(i==n)
        {
            ans.push_back(t);
            return ;
        }
            
        if(j==n)
        solve(i+1,0,t,n);
        
        for(int k=0;k<n;k++)
        {
            if(is_safe(i,k,t,n))
            {
                t[i][k]='Q';
                solve(i+1,0,t,n);
                    
                t[i][k]='.';
            }
        }
       
    }
    vector<vector<string>> solveNQueens(int n) {
        string s="";
        for(int i=0;i<n;i++)
        {
            s=s+".";
        }
        vector<string> t(n,s);
        solve(0,0,t,n);
        return ans;
    }
};


Q3-> 37. Sudoku Solver (https://leetcode.com/problems/sudoku-solver/)
class Solution {
public:
    
   bool check(vector<vector<char>> &board, int i, int j, char val)
{
    int row = i - i%3, column = j - j%3;
    for(int x=0; x<9; x++) if(board[x][j] == val) return false;
    for(int y=0; y<9; y++) if(board[i][y] == val) return false;
    for(int x=0; x<3; x++)
    for(int y=0; y<3; y++)
        if(board[row+x][column+y] == val) return false;
    return true;
}
bool solveSudoku(vector<vector<char>> &board, int i, int j)
{
    if(i==9) return true;
    if(j==9) return solveSudoku(board, i+1, 0);
    if(board[i][j] != '.') return solveSudoku(board, i, j+1);

    for(char c='1'; c<='9'; c++)
    {
        if(check(board, i, j, c))
        {
            board[i][j] = c;
            if(solveSudoku(board, i, j+1)) return true;
            board[i][j] = '.';
        }
    }
        
    return false;
}

void solveSudoku(vector<vector<char>>& board) {
   solveSudoku(board, 0, 0);
}
};


Q4-> M-Coloring Problem (https://practice.geeksforgeeks.org/problems/m-coloring-problem-1587115620/1#)
 bool is_safe(int node,int c,bool graph[101][101],int n,vector<int>& color)
    {
        for(int i=0;i<n;i++)
        {
            if(graph[node][i]==true && color[i]==c)
            return false;
        }
        return true;
    }
    bool solve(bool graph[101][101],int node,int m,int n,vector<int>& color)
    {
        if(node==n)
        return true;
        
        for(int c=1;c<=m;c++)
        {
            if(is_safe(node,c,graph,n,color))
            {
                color[node]=c;
                if(solve(graph,node+1,m,n,color))
                return true;
                color[node]=0;
            }
        }
        return false;
    }
    bool graphColoring(bool graph[101][101], int m, int n) {
        // your code here
        vector<int> color(n,0);
        return solve(graph,0,m,n,color);
    }


Q5-> Rat in a Maze Problem - I (https://practice.geeksforgeeks.org/problems/rat-in-a-maze-problem/1)
 vector<string> ans;
    void solve(vector<vector<int>>& m,int i,int j,int n,string path)
    {
        if(i<0||j<0||i>=n||j>=n)
        return ;
        
        if(m[i][j]==0)
        return ;
        
        if(i==n-1&& j==n-1)
        {
            ans.push_back(path);
            return ;
        }
        
        m[i][j]=0;
        solve(m,i+1,j,n,path+"D");
        solve(m,i-1,j,n,path+"U");
        solve(m,i,j+1,n,path+"R");
        solve(m,i,j-1,n,path+"L");
        m[i][j]=1;
        
    }
    vector<string> findPath(vector<vector<int>> &m, int n) {
        // Your code goes here
        string p="";
         if (m[0][0] == 0)
           return ans;
       if(m[n - 1][n - 1] == 0)
           return ans;
        solve(m,0,0,n,p);
        return ans;
    }


Q6-> Word Break II (https://www.codingninjas.com/codestudio/problems/983635?topList=striver-sde-sheet-problems&utm_source=striver&utm_medium=website&leftPanelTab=0)
#include <bits/stdc++.h>

void solve(string& s,set<string> &di,int i,vector<string>& t,vector<string>& ans,string curr)
{
    if(i==s.length())
    {
       
        return ;
    }
    curr+=s[i];
    if(di.find(curr)==di.end())
    {
        solve(s,di,i+1,t,ans,curr);
    }
    else
    {
        t.push_back(curr);
        if(i==s.length()-1)
        {
             string p="";
        for(int i=0;i<t.size();i++)
        {
            p=p+t[i];
            p=p+" ";
        }
        
        ans.push_back(p);
            
        }
        solve(s,di,i+1,t,ans,"");
        t.pop_back();
        solve(s,di,i+1,t,ans,curr);
    }
}
vector<string> wordBreak(string &st, vector<string> &dictionary)
{
    // Write your code here
    set<string> s;
    for(int i=0;i<dictionary.size();i++)
    {
        s.insert(dictionary[i]);
    }
    vector<string> ans;
    vector<string> t;
    solve(st,s,0,t,ans,"");
    return ans;

}