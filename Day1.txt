Q1-> 73. Set Matrix Zeroes (https://leetcode.com/problems/set-matrix-zeroes/)
class Solution {
public:
    void setZeroes(vector<vector<int>>& matrix) {
        multiset<pair<int,int>> s;
        for(int i=0;i<matrix.size();i++)
        {
            for(int j=0;j<matrix[0].size();j++)
            {
                if(matrix[i][j]==0)
                {
                    s.insert({i,1});
                    s.insert({j,2});
                }
            }
        }
        
        for(auto i:s)
        {
            if(i.second==1)
            {
                for(int j=0;j<matrix[0].size();j++)
                    matrix[i.first][j]=0;
            }
            else
            {
                for(int j=0;j<matrix.size();j++)
                    matrix[j][i.first]=0;
            }
        }
    }
};


Q2-> 118. Pascal's Triangle (https://leetcode.com/problems/pascals-triangle/)
class Solution {
public:
    
    vector<vector<int>> generate(int n) {
        vector<vector<int>> ans;
        for(int i=0;i<n;i++)
        {
            vector<int> t(i+1);
            t[0]=1;
            t[i]=1;
            for(int j=1;j<i;j++)
            {
                t[j]=ans[i-1][j-1]+ans[i-1][j];
            }
            ans.push_back(t);
        }
        return ans;
    }
};


Q3-> 31. Next Permutation (https://leetcode.com/problems/next-permutation/)
class Solution {
public:
    void nextPermutation(vector<int>& nums) {
        
        int s=-1,e;
        for(int i=nums.size()-2;i>=0;i--)
        {
            if(nums[i]<nums[i+1])
            {
                s=i;
                break;
            }
        }
        
        if(s==-1)
        {
            reverse(nums.begin(),nums.end());
            return ;
        }
        for(int i=nums.size()-1;i>=0;i--)
        {
            if(nums[i]>nums[s])
            {
                e=i;
                break;
            }
        }
        
        swap(nums[s],nums[e]);
        reverse(nums.begin()+s+1,nums.end());
    }
};


Q4-> 53. Maximum Subarray (https://leetcode.com/problems/maximum-subarray/)
class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int ans=INT_MIN,temp=0;
        for(auto i:nums)
        {
            temp+=i;
            ans=max(ans,temp);
            if(temp<0)
                temp=0;
        }
        return ans;
    }
};


Q5-> 75. Sort Colors (https://leetcode.com/problems/sort-colors/)
class Solution {
public:
    void sortColors(vector<int>& nums) {
        int i=0;
        int l=0,h=nums.size()-1;
        while(i<=h)
        {
            if(nums[i]==0)
            {
                swap(nums[i],nums[l]);
                i++;
                l++;
            }
            else if(nums[i]==2)
            {
                swap(nums[i],nums[h]);
                h--;
            }
            else
                i++;
        }
    }
};


Q6-> 121. Best Time to Buy and Sell Stock (https://leetcode.com/problems/best-time-to-buy-and-sell-stock/)
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int ans=0;
        int mn=prices[0];
        for(int i=1;i<prices.size();i++)
        {
            ans=max(ans,prices[i]-mn);
            mn=min(mn,prices[i]);
        }
        return ans;
    }
};
