Q1-> Floor in BST (https://www.codingninjas.com/codestudio/problems/floor-from-bst_920457?source=youtube&campaign=Striver_Tree_Videos&utm_source=youtube&utm_medium=affiliate&utm_campaign=Striver_Tree_Videos&leftPanelTab=0)
void solve(TreeNode<int> * root, int X,int& ans)
{
    if(root==NULL)
        return ;
    
    if(root->val==X)
    {
        ans=X;
        return ;
    }
    if(root->val>X)
    {
        solve(root->left,X,ans);
    }
    if(root->val<X)
    {
        ans=root->val;
        solve(root->right,X,ans);
    }
}
int floorInBST(TreeNode<int> * root, int X)
{
    int ans=-1;
    solve(root,X,ans);
    return ans;
}


Q2-> Ceil from BST (https://www.codingninjas.com/codestudio/problems/ceil-from-bst_920464?source=youtube&campaign=Striver_Tree_Videos&utm_source=youtube&utm_medium=affiliate&utm_campaign=Striver_Tree_Videos&leftPanelTab=0)
void solve(BinaryTreeNode<int> * root, int X,int& ans)
{
    if(root==NULL)
        return ;
    
    if(root->data==X)
    {
        ans=X;
        return ;
    }
    if(root->data>X)
    {
         ans=root->data;
        solve(root->left,X,ans);
    }
    if(root->data<X)
    {
        solve(root->right,X,ans);
    }
}
int findCeil(BinaryTreeNode<int> *node, int x){
     int ans=-1;
    solve(node,x,ans);
    return ans;
}


Q3-> 230. Kth Smallest Element in a BST (https://leetcode.com/problems/kth-smallest-element-in-a-bst/)
class Solution {
public:
    bool flag=true;
    int ans;
    void solve(TreeNode* root,int& k)
    {
        if(flag==true)
        {
            if(root==NULL)
            return ;
        
           solve(root->left,k);
           k--;
           if(k==0)
          {
            ans=root->val;
            flag=false;
          }
          solve(root->right,k);
        }

    }
    int kthSmallest(TreeNode* root, int k) {
        solve(root,k);
        return ans;
    }
};


Q4-> Kth largest element in BST (https://practice.geeksforgeeks.org/problems/kth-largest-element-in-bst/1)
class Solution
{
    public:
    void in(Node* root,int &count,int &ans,int k)
    {
        if(root==NULL)
        return ;
        
        in(root->right,count,ans,k);
        count++;
        if(count==k)
        {
            ans=root->data;
            return ;
        }
        in(root->left,count,ans,k);
    }
    int kthLargest(Node *root, int K)
    {
        //Your code here
        int count=0,ans=-1;
        in(root,count,ans,K);
        return ans;
    }
};


Q5-> 653. Two Sum IV - Input is a BST (https://leetcode.com/problems/two-sum-iv-input-is-a-bst/)
class Solution {
public:
    unordered_map<int,int> mp;
    void solve(TreeNode* root,int k,int& ans)
    {
        if(root==NULL)
            return ;
        
        solve(root->left,k,ans);
        if(mp.find(k-root->val)!=mp.end())
        {
            ans=true;
            return ;
        }
        mp[root->val]++;
        solve(root->right,k,ans);
    }
    bool findTarget(TreeNode* root, int k) {
        if(root==NULL)
            return false;
        
        int ans=false;
        solve(root,k,ans);
        return ans;
    }
};


Q6-> 173. Binary Search Tree Iterator (https://leetcode.com/problems/binary-search-tree-iterator/)
class BSTIterator {
public:
    TreeNode* head;
    vector<int> arr;
    int t;
    void inorder(TreeNode* head)
    {
        if(head==NULL)
            return;
        inorder(head->left);
        arr.push_back(head->val);
        inorder(head->right);
    }
    BSTIterator(TreeNode* root) {
        head=root;
        inorder(head);
        t=0;
    }
    
    int next() {
        return arr[t++];
    }
    
    bool hasNext() {
        if(t >= arr.size())
            return false;
        else
            return true;
    }
};


Q7-> 1373. Maximum Sum BST in Binary Tree (https://leetcode.com/problems/maximum-sum-bst-in-binary-tree/)
class Solution {
    struct S {
        bool isBST;
        int minVal, maxVal, sum;
    };
    
    S helper(TreeNode *node, int &res) {
        if (!node) {
            return { true, INT_MAX, INT_MIN, 0 };
        }
        S l = helper(node->left, res);
        S r = helper(node->right, res);
        if (l.isBST && r.isBST && l.maxVal < node->val && r.minVal > node->val) {
            int sum = l.sum + r.sum + node->val;
            res = max(res, sum);
            return { true, min(l.minVal, node->val), max(r.maxVal, node->val), sum };
        } else {
            return { false, 0, 0, 0 };
        }
    }
public:
    int maxSumBST(TreeNode* root) {
        int res = 0;
        helper(root, res);
        return res;
    }
};


Q8-> 297. Serialize and Deserialize Binary Tree (https://leetcode.com/problems/serialize-and-deserialize-binary-tree/)
class Codec {
    TreeNode* makeTree(queue<string> &q) {
        string s = q.front();
        q.pop();
        if(s=="null")
            return NULL;
        TreeNode* root = new TreeNode(stoi(s));
        root->left = makeTree(q);
        root->right = makeTree(q);
        return root;
    }
public:

    // Encodes a tree to a single string.
    string serialize(TreeNode* root) {
        if(!root)
            return "null,";
      return to_string(root->val)+","+ serialize(root->left) + serialize(root->right);
    }

    // Decodes your encoded data to tree.
    TreeNode* deserialize(string data) {
        string s ="";
        queue <string> q;
        for(char c: data) {
            if(c ==',') {
                q.push(s);
                s="";
                continue;
            }
            s+=c;
        }
        return makeTree(q);
    }
};