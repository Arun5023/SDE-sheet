Q1-> 151. Reverse Words in a String (https://leetcode.com/problems/reverse-words-in-a-string/)
class Solution {
public:
    string reverseWords(string s) {
        vector<string> arr;
        string str="";
        for(int i=0;i<s.length();i++)
        {
            // if(s[i]==' '&& str="")
            //     continue;
            if(s[i]==' ')
            {
                if(str!="")
              arr.push_back(str);
                str="";
            }
            else
            {
                str=str+s[i];
                
            }
        }
        if(str!="")
            arr.push_back(str);
        
        string ans="";
        for(int i=arr.size()-1;i>=0;i--)
        {
            ans=ans+arr[i];
            if(i!=0)
            ans=ans+" ";
        }
        return ans;
    }
};


Q2-> 5. Longest Palindromic Substring (https://leetcode.com/problems/longest-palindromic-substring/)
class Solution 
{
public:
    string longestPalindrome(string s)
    {
        int n=s.length(),start=0,len=0,dp[n][n];
        memset(dp,false,sizeof(dp));
        for(int i=0;i<n;i++)
        {
            dp[i][i]=true;
            len=1;
            start=i;
        }
        for(int i=0;i<n-1;i++)
        {
            if(s[i]==s[i+1])
            {
                dp[i][i+1]=true;
                start=i;
                len=2;
            }
        }
        for(int k=3;k<=n;k++)
        {
            for(int i=0;i<=n-k;i++)
            {
                int j=i+k-1;
                if(s[i]==s[j] && dp[i+1][j-1])
                {
                    dp[i][j]=true;
                    start=i;
                    len=max(len,k);
                }
            }
        }
        return s.substr(start,len);
    }
};


Q3-> 13. Roman to Integer (https://leetcode.com/problems/roman-to-integer/)
class Solution {
public:
    int romanToInt(string s) {
          int ans=0;
        for(int i=0;i<s.length();i++)
        {
            if(s[i]=='M')
                ans=ans+1000;
           else if(s[i]=='C' && i+1<s.length() && s[i+1]=='M')
           {
                ans+=900;
                i++;
           }
            else if(s[i]=='D')
                ans+=500;
            else if(s[i]=='C' && i+1<s.length() && s[i+1]=='D')
             {
                ans+=400;
                i++;
             }  
            else if(s[i]=='C')
                ans+=100;
            else if(s[i]=='X' && i+1<s.length() && s[i+1]=='C')
             {
                ans+=90;
                i++;
             } 
            else if(s[i]=='L')
                ans+=50;
            else if(s[i]=='X' && i+1<s.length() && s[i+1]=='L')
             {
                ans+=40;
                i++;
             }
             else if(s[i]=='X')
                ans+=10;
            else if(s[i]=='I' && i+1<s.length() && s[i+1]=='X')
             {
                ans+=9;
                i++;
             }
              else if(s[i]=='V')
                ans+=5;
            else if(s[i]=='I' && i+1<s.length() && s[i+1]=='V')
             {
                ans+=4;
                i++;
             }
            else if(s[i]=='I')
                ans+=1;
            
        }
        return ans;
    }
};


Q4-> 8. String to Integer (atoi) (https://leetcode.com/problems/string-to-integer-atoi/)
class Solution {
public:
    int myAtoi(string s) {
       long long int ans=0;
        int flag=0;
        int count=0,zero=0;
        int num=0;
        for(int i=0;i<s.length();i++)
        {
            
           if(s[i]==' ' && num==0)
               continue;
            if(s[i]==' ' && num!=0)
                break;
            
            if(count>1)
                break;
            if(s[i]=='0'||s[i]=='1'||s[i]=='2'||s[i]=='3'||s[i]=='4'||s[i]=='5'||s[i]=='6'||s[i]=='7'||s[i]=='8'||s[i]=='9')
            {
                if(s[i]=='0') zero++;               
               
                ans=ans*10+s[i]-48;
                if(ans==INT_MAX && flag==1)
                    return -1*ans;
                if(ans>INT_MAX)
                {
                    ans=INT_MAX;
                    break;
                }
                
                num++;
            }
            else
            {
                if(s[i]=='-' && ans==0 && zero==0)
                {
                    flag=1;
                    count++;
                    num++;
                }
               else if(s[i]=='+' && ans==0 && zero==0)
                {
                    flag=0;
                   count++;
                   num++;
                }
                else
                    break;
            }
        }
        if(flag==1 && ans==INT_MAX)
            return -1*ans-1;
        if(flag==1)
            return -1*ans;
        return ans;
    }
};


Q5-> 14. Longest Common Prefix (https://leetcode.com/problems/longest-common-prefix/)
class Solution {
public:
    string longestCommonPrefix(vector<string>& str) {
        int n=str.size();
        string ans="";
        int x=0;
        while(x<str[0].size())
        {
            char t=str[0][x];
            int i=0;
           for(i=1;i<n;i++)
           {
               if(str[i][x]!=t)
                   return ans;
           }
            if(i==n)
                ans=ans+t;
            
            x++;
        }
        return ans;
    }
};


Q6-> Rabin Carp (https://www.codingninjas.com/codestudio/problems/1115738?topList=striver-sde-sheet-problems&utm_source=striver&utm_medium=website&leftPanelTab=0)
vector<int> stringMatch(string &str, string &pat) {
    vector<int> ans;
    int start=0;
    
    int i=0,j=0;
    while(i<str.length())
    {
        if(str[i]==pat[j])
        {
            i++;
            j++;
            if(j>=pat.length())
            {
            ans.push_back(i-j);
                i=i-j+1;
            j=0;
            }
        }
        else
        {
            i=i-j+1;
            j=0;
        }  
    }
    return ans;
}